<?php

/**
 * @file
 * Adds Entity Translation support to the Search API.
 */

/**
 * Implements hook_search_api_item_type_info().
 *
 * Provides a multilingual version of all entity types.
 */
function search_api_et_search_api_item_type_info() {
  $types = array();

  foreach (entity_get_property_info() as $type => $property_info) {
    if ($info = entity_get_info($type)) {
      $types["search_api_et_$type"] = array(
        'name' => t('!type (multilingual)', array('!type' => $info['label'])),
        'datasource controller' => 'SearchApiEtDatasourceController',
        'entity_type' => $type,
      );
    }
  }

  return $types;
}

/**
 * Implements search_api_index_update().
 */
function search_api_et_search_api_index_update(SearchApiIndex $index) {
  // On feature reverts, the index's numerical ID might change. In that case,
  // we need to keep the {search_api_et_item} table up to date.
  if ($index->id != $index->original->id) {
    db_update('search_api_et_item')
      ->fields(array('index_id' => $index->id))
      ->condition('index_id', $index->original->id)
      ->execute();
  }
}

/**
 * Determines the languages that are available for an entity in a certain index.
 *
 * @param object $entity
 *   The entity for which languages should be determined.
 * @param SearchApiIndex $index
 *   The index whose settings should be used for determining the languages.
 *
 * @return array
 *   An array of language codes for the languages that are available.
 */
function search_api_et_item_languages($entity, SearchApiIndex $index) {
  // @todo Implement.
}
